{"ast":null,"code":"import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\n\nexport class TransportEvent {\n  /**\n   * @param transport The transport object which the event belongs to\n   */\n  constructor(transport, opts) {\n    /**\n     * The unique id of the event\n     */\n    this.id = TransportEvent._eventId++;\n    /**\n     * The remaining value between the passed in time, and Math.floor(time).\n     * This value is later added back when scheduling to get sub-tick precision.\n     */\n\n    this._remainderTime = 0;\n    const options = Object.assign(TransportEvent.getDefaults(), opts);\n    this.transport = transport;\n    this.callback = options.callback;\n    this._once = options.once;\n    this.time = Math.floor(options.time);\n    this._remainderTime = options.time - this.time;\n  }\n\n  static getDefaults() {\n    return {\n      callback: noOp,\n      once: false,\n      time: 0\n    };\n  }\n  /**\n   * Get the time and remainder time.\n   */\n\n\n  get floatTime() {\n    return this.time + this._remainderTime;\n  }\n  /**\n   * Invoke the event callback.\n   * @param  time  The AudioContext time in seconds of the event\n   */\n\n\n  invoke(time) {\n    if (this.callback) {\n      const tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n      this.callback(time + this._remainderTime * tickDuration);\n\n      if (this._once) {\n        this.transport.clear(this.id);\n      }\n    }\n  }\n  /**\n   * Clean up\n   */\n\n\n  dispose() {\n    this.callback = undefined;\n    return this;\n  }\n\n}\n/**\n * Current ID counter\n */\n\nTransportEvent._eventId = 0;","map":{"version":3,"sources":["../../../../Tone/core/clock/TransportEvent.ts"],"names":[],"mappings":"AACA,SAAS,IAAT,QAAqB,mBAArB;AAUA;;;;AAIG;;AACH,OAAM,MAAO,cAAP,CAAqB;AAiC1B;;AAEG;AACH,EAAA,WAAA,CAAY,SAAZ,EAAkC,IAAlC,EAAsE;AA7BtE;;AAEG;AACH,SAAA,EAAA,GAAa,cAAc,CAAC,QAAf,EAAb;AAiBA;;;AAGG;;AACO,SAAA,cAAA,GAAiB,CAAjB;AAOT,UAAM,OAAO,GAA0B,MAAM,CAAC,MAAP,CAAc,cAAc,CAAC,WAAf,EAAd,EAA4C,IAA5C,CAAvC;AAEA,SAAK,SAAL,GAAiB,SAAjB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,IAArB;AACA,SAAK,IAAL,GAAY,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,IAAnB,CAAZ;AACA,SAAK,cAAL,GAAsB,OAAO,CAAC,IAAR,GAAe,KAAK,IAA1C;AACA;;AAED,SAAO,WAAP,GAAkB;AACjB,WAAO;AACN,MAAA,QAAQ,EAAE,IADJ;AAEN,MAAA,IAAI,EAAE,KAFA;AAGN,MAAA,IAAI,EAAE;AAHA,KAAP;AAKA;AAOD;;AAEG;;;AACH,MAAc,SAAd,GAAuB;AACtB,WAAO,KAAK,IAAL,GAAY,KAAK,cAAxB;AACA;AAED;;;AAGG;;;AACH,EAAA,MAAM,CAAC,IAAD,EAAc;AACnB,QAAI,KAAK,QAAT,EAAmB;AAClB,YAAM,YAAY,GAAG,KAAK,SAAL,CAAe,GAAf,CAAmB,kBAAnB,CAAsC,CAAtC,EAAyC,IAAzC,CAArB;AACA,WAAK,QAAL,CAAc,IAAI,GAAG,KAAK,cAAL,GAAsB,YAA3C;;AACA,UAAI,KAAK,KAAT,EAAgB;AACf,aAAK,SAAL,CAAe,KAAf,CAAqB,KAAK,EAA1B;AACA;AACD;AACD;AAED;;AAEG;;;AACH,EAAA,OAAO,GAAA;AACN,SAAK,QAAL,GAAgB,SAAhB;AACA,WAAO,IAAP;AACA;;AAvFyB;AAuD1B;;AAEG;;AACY,cAAA,CAAA,QAAA,GAAW,CAAX","sourceRoot":"","sourcesContent":["import { noOp } from \"../util/Interface\";\n/**\n * TransportEvent is an internal class used by [[Transport]]\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n    /**\n     * @param transport The transport object which the event belongs to\n     */\n    constructor(transport, opts) {\n        /**\n         * The unique id of the event\n         */\n        this.id = TransportEvent._eventId++;\n        /**\n         * The remaining value between the passed in time, and Math.floor(time).\n         * This value is later added back when scheduling to get sub-tick precision.\n         */\n        this._remainderTime = 0;\n        const options = Object.assign(TransportEvent.getDefaults(), opts);\n        this.transport = transport;\n        this.callback = options.callback;\n        this._once = options.once;\n        this.time = Math.floor(options.time);\n        this._remainderTime = options.time - this.time;\n    }\n    static getDefaults() {\n        return {\n            callback: noOp,\n            once: false,\n            time: 0,\n        };\n    }\n    /**\n     * Get the time and remainder time.\n     */\n    get floatTime() {\n        return this.time + this._remainderTime;\n    }\n    /**\n     * Invoke the event callback.\n     * @param  time  The AudioContext time in seconds of the event\n     */\n    invoke(time) {\n        if (this.callback) {\n            const tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n            this.callback(time + this._remainderTime * tickDuration);\n            if (this._once) {\n                this.transport.clear(this.id);\n            }\n        }\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        this.callback = undefined;\n        return this;\n    }\n}\n/**\n * Current ID counter\n */\nTransportEvent._eventId = 0;\n//# sourceMappingURL=TransportEvent.js.map"]},"metadata":{},"sourceType":"module"}